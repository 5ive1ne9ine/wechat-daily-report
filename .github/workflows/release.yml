name: 自动版本发布

# 添加权限配置
permissions:
  contents: write
  packages: write
  actions: read

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.gitignore'
      - 'website/**'

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
      new-version: ${{ steps.version.outputs.new-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 检查是否需要发布
        id: check
        run: |
          # 检查最近的提交是否包含版本更新关键词
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ "$COMMIT_MSG" =~ (feat|fix|perf|refactor|style|test|docs|build|ci|chore|breaking|BREAKING) ]]; then
            echo "should-release=true" >> $GITHUB_OUTPUT
          else
            echo "should-release=false" >> $GITHUB_OUTPUT
          fi

      - name: 计算新版本号
        id: version
        if: steps.check.outputs.should-release == 'true'
        run: |
          # 获取当前版本
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "当前版本: $CURRENT_VERSION"
          
          # 获取最近的提交信息
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "提交信息: $COMMIT_MSG"
          
          # 根据提交类型决定版本更新策略
          if [[ "$COMMIT_MSG" =~ (BREAKING|breaking) ]]; then
            # 主版本更新
            echo "检测到破坏性更改，执行主版本更新"
            NEW_VERSION=$(npm version major --no-git-tag-version --no-commit-hooks)
          elif [[ "$COMMIT_MSG" =~ (feat) ]]; then
            # 次版本更新
            echo "检测到新功能，执行次版本更新"
            NEW_VERSION=$(npm version minor --no-git-tag-version --no-commit-hooks)
          else
            # 补丁版本更新
            echo "执行补丁版本更新"
            NEW_VERSION=$(npm version patch --no-git-tag-version --no-commit-hooks)
          fi
          
          # 清理版本号格式（移除可能的 'v' 前缀）
          NEW_VERSION=$(echo "$NEW_VERSION" | sed 's/^v//')
          
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "新版本号: $NEW_VERSION"

  build-and-release:
    needs: check-changes
    if: needs.check-changes.outputs.should-release == 'true'
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: mac
          - os: windows-latest
            platform: win
          - os: ubuntu-latest
            platform: linux
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: 更新版本号
        run: |
          npm version ${{ needs.check-changes.outputs.new-version }} --no-git-tag-version --no-commit-hooks

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Package application
        run: |
          if [ "${{ matrix.platform }}" = "mac" ]; then
            npm run dist:mac
          elif [ "${{ matrix.platform }}" = "win" ]; then
            npm run dist:win
          else
            npm run dist:linux
          fi
        shell: bash

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.platform }}
          path: release/
          retention-days: 1

  create-release:
    needs: [check-changes, build-and-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: 整理发布文件
        run: |
          mkdir -p release
          find ./artifacts -name "*.dmg" -o -name "*.exe" -o -name "*.AppImage" | xargs -I {} cp {} release/
          ls -la release/

      - name: 生成发布说明
        id: release-notes
        run: |
          VERSION="${{ needs.check-changes.outputs.new-version }}"
          COMMIT_MSG=$(git log -1 --pretty=%B)
          
          cat > release_notes.md << EOF
          ## 🎉 微信群聊日报生成器 $VERSION
          
          ### 📝 更新内容
          $COMMIT_MSG
          
          ### ✨ 主要功能
          - 🧠 **AI智能分析**：基于先进的AI技术分析群聊内容，自动识别重要信息
          - 🎯 **话题精华提取**：智能识别讨论中的重要话题，生成详细摘要  
          - 💬 **群友金句收集**：自动提取群聊中的精彩言论和有价值观点
          - 📋 **跟进事项识别**：智能识别需要跟进的任务、决策和重要事项
          - 🎨 **精美日报生成**：生成美观的图片格式日报，支持导出分享
          - 💻 **跨平台支持**：支持 macOS、Windows、Linux 三大操作系统
          
          ### 📦 安装包说明
          - **macOS**: 支持 Intel 和 Apple Silicon 芯片
          - **Windows**: 适用于 Windows 10 及以上版本
          - **Linux**: AppImage 格式，免安装直接运行
          
          ### 🚀 快速开始
          1. 下载对应平台的安装包
          2. 安装应用并启动
          3. 配置AI服务设置
          4. 选择群聊和日期范围
          5. 一键生成精美日报
          
          ### 🔗 相关链接
          - 📖 [使用文档](https://github.com/mengjian-github/wechat-daily-report#readme)
          - 🐛 [问题反馈](https://github.com/mengjian-github/wechat-daily-report/issues)
          - 💬 [讨论区](https://github.com/mengjian-github/wechat-daily-report/discussions)
          
          感谢所有用户的支持！如有问题请通过GitHub Issues反馈。
          EOF

      - name: 创建GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.check-changes.outputs.new-version }}
          name: "微信群聊日报生成器 v${{ needs.check-changes.outputs.new-version }}"
          body_path: release_notes.md
          files: |
            release/*.dmg
            release/*.exe
            release/*.AppImage
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-website:
    needs: [check-changes, create-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 安装必要工具
        run: |
          # 安装GitHub CLI
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh jq

      - name: 认证GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: 等待Release完全创建
        run: |
          VERSION="v${{ needs.check-changes.outputs.new-version }}"
          REPO="mengjian-github/wechat-daily-report"
          
          echo "等待release $VERSION 完全创建..."
          
          # 最多等待5分钟，确保assets完全上传
          for i in {1..60}; do
            echo "检查第 $i 次..."
            
            if gh release view $VERSION --repo $REPO > /dev/null 2>&1; then
              echo "Release存在，检查assets..."
              
              ASSETS_COUNT=$(gh release view $VERSION --repo $REPO --json assets | jq '.assets | length')
              echo "当前assets数量: $ASSETS_COUNT"
              
              if [ "$ASSETS_COUNT" -gt 0 ]; then
                echo "Release已完全创建，assets数量: $ASSETS_COUNT"
                break
              fi
            fi
            
            if [ $i -eq 60 ]; then
              echo "等待超时，继续执行..."
              break
            fi
            
            sleep 5
          done

      - name: 更新官网下载链接
        run: |
          cd website
          VERSION="v${{ needs.check-changes.outputs.new-version }}"
          REPO="mengjian-github/wechat-daily-report"
          
          echo "使用版本号: $VERSION"
          echo "仓库: $REPO"
          
          # 验证release是否存在
          echo "检查release $VERSION 是否存在..."
          if ! gh release view $VERSION --repo $REPO > /dev/null 2>&1; then
            echo "错误：Release $VERSION 不存在"
            exit 1
          fi
          
          # 获取release信息并调试
          echo "获取release信息..."
          RELEASE_INFO=$(gh release view $VERSION --repo $REPO --json assets 2>&1)
          RELEASE_EXIT_CODE=$?
          
          echo "GitHub CLI 退出码: $RELEASE_EXIT_CODE"
          echo "Release信息原始输出: $RELEASE_INFO"
          
          if [ $RELEASE_EXIT_CODE -ne 0 ]; then
            echo "错误：无法获取release信息"
            echo "错误详情: $RELEASE_INFO"
            exit 1
          fi
          
          # 验证返回的是有效的JSON
          if ! echo "$RELEASE_INFO" | jq . > /dev/null 2>&1; then
            echo "错误：返回的不是有效的JSON格式"
            echo "原始输出: $RELEASE_INFO"
            exit 1
          fi
          
          # 检查是否有assets
          ASSETS_COUNT=$(echo "$RELEASE_INFO" | jq '.assets | length' 2>/dev/null)
          if [ $? -ne 0 ] || [ -z "$ASSETS_COUNT" ]; then
            echo "错误：无法解析assets信息"
            exit 1
          fi
          
          echo "Assets数量: $ASSETS_COUNT"
          
          if [ "$ASSETS_COUNT" -eq 0 ]; then
            echo "警告：Release中没有找到任何assets"
            exit 0
          fi
          
          # 列出所有assets用于调试
          echo "所有assets:"
          echo "$RELEASE_INFO" | jq -r '.assets[] | .name'
          
          # 获取下载链接，修复API字段问题（使用url而不是browser_download_url）
          echo "获取下载链接..."
          
          MAC_INTEL_URL=$(echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name | contains(".dmg")) | select(.name | contains("arm64") | not) | .url' 2>/dev/null | head -1)
          MAC_ARM_URL=$(echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name | contains(".dmg")) | select(.name | contains("arm64")) | .url' 2>/dev/null | head -1)
          WINDOWS_URL=$(echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name | contains(".exe")) | select(.name | contains("Setup")) | .url' 2>/dev/null | head -1)
          LINUX_URL=$(echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name | contains(".AppImage")) | .url' 2>/dev/null | head -1)
          
          echo "获取到的下载链接："
          echo "macOS Intel: $MAC_INTEL_URL"
          echo "macOS ARM: $MAC_ARM_URL"
          echo "Windows: $WINDOWS_URL"
          echo "Linux: $LINUX_URL"
          
          # 更新HTML文件中的下载链接，使用更精确的正则表达式
          if [ -n "$MAC_INTEL_URL" ] && [ "$MAC_INTEL_URL" != "null" ]; then
            echo "更新macOS Intel下载链接..."
            sed -i 's|https://github\.com/mengjian-github/wechat-daily-report/releases/[^"]*x64\.dmg|'$MAC_INTEL_URL'|g' index.html
          fi
          if [ -n "$MAC_ARM_URL" ] && [ "$MAC_ARM_URL" != "null" ]; then
            echo "更新macOS ARM下载链接..."
            sed -i 's|https://github\.com/mengjian-github/wechat-daily-report/releases/[^"]*arm64\.dmg|'$MAC_ARM_URL'|g' index.html
          fi
          if [ -n "$WINDOWS_URL" ] && [ "$WINDOWS_URL" != "null" ]; then
            echo "更新Windows下载链接..."
            sed -i 's|https://github\.com/mengjian-github/wechat-daily-report/releases/[^"]*\.exe|'$WINDOWS_URL'|g' index.html
          fi
          if [ -n "$LINUX_URL" ] && [ "$LINUX_URL" != "null" ]; then
            echo "更新Linux下载链接..."
            sed -i 's|https://github\.com/mengjian-github/wechat-daily-report/releases/[^"]*\.AppImage|'$LINUX_URL'|g' index.html
          fi

      - name: 提交官网更新
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add website/index.html
          if git diff --staged --quiet; then
            echo "没有需要提交的更改"
          else
            git commit -m "🔄 自动更新官网下载链接到 ${{ needs.check-changes.outputs.new-version }}"
            # 推送更改，添加重试机制
            for i in {1..3}; do
              if git push; then
                echo "成功推送更改"
                break
              else
                echo "推送失败，重试 $i/3..."
                sleep 5
              fi
              
              if [ $i -eq 3 ]; then
                echo "推送失败，请手动检查"
                exit 1
              fi
            done
          fi